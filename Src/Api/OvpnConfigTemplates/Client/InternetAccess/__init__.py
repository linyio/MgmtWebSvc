import typing
from Api.OvpnConfigTemplates.Common.ConfigTemplateBase import ConfigTemplateBase
from io import BytesIO

class ConfigTemplate(ConfigTemplateBase):
    @staticmethod
    def Info(): #define it in derived classes
        return {
            "version": super(ConfigTemplate, ConfigTemplate).Info()["version"],
            "type": "client",
            "name": "Internet access",
            "description": "Simple OpenVPN client configuration for DNS and internet access",
        }

    # class ConfigVars:
    #     def __init__(self, configVars):
    #         self.m_configVars = configVars
    #
    #     def __getitem__(self, key):
    #         if key in self.m_configVars:
    #             return self.m_configVars[key]
    #         elif key ==

    # def __init__(self, configVars: typing.Dict):
    #     super().__init__(configVars)
    #     from Utils import CertsUtils
    #     cert = CertsUtils.CertFromSerializedCert(configVars["cert"])
    #     from cryptography import x509
    #     self.m_configVars["entityName"] = cert.subject.get_attributes_for_oid(x509.NameOID.COMMON_NAME)[0].value

    def BaseName(self):
        return f'{super().BaseName()}-{self.m_configVars["os"]}-{self.m_configVars["entityName"].replace(" ", "_")}'

    def ArchName(self):
        return self.BaseName() + ".tar.xz" if self.m_configVars["os"] == "linux" else None

    def InstallInstructions(self, linePrefix: str = "") -> str:
        return {
            "linux": f"""{linePrefix}Install the Linux Openvpn client using local package manager and then apply the current configuration, by copying/unarchive it to /etc/openvpn directory.
{linePrefix}If the files will be deployed to a different folder than /etc/openvpn the down root plugin script path has to be adjusted. Search for "plugin openvpn-plugin-down-root.so" in configration file - the one with .conf extension.
{linePrefix}The /var/run/openvpn folder is used to dump useful information for restoring system's settings. If the folder doesn't exist then create it or specify another one
{linePrefix}If the Openvpn client will run in a lxc container then run 'cp /lib/systemd/system/openvpn-client\@.service /etc/systemd/system/' edit the "/etc/systemd/system/openvpn-client\@.service" and 
{linePrefix}comment-out the line "LimitNPROC=10" and, finally, reload the lxd daemon with 'systemctl daemon-reload'
        """,
            "win": f"""{linePrefix}Download the openvpn client from "https://openvpn.net/community-downloads", install it and then apply the current configuration, by copying it to the install config folder, usually "c:\Program Files\OpenVPN\config"
        """,
            "macos": f"""{linePrefix}Install the Tunnelblick openvpn client from "https://tunnelblick.net/" or check the Openvpn connect page at "https://openvpn.net/vpn-server-resources/connecting-to-access-server-with-macos/"
        {linePrefix}and then import the current configuration in the newly installed client
        """,
            "android": f"""{linePrefix}Install the openvpn client from Google Play ("https://play.google.com/store/apps/details?id=net.openvpn.openvpn") and then copy and import the current configuration from the device saved location.
        {linePrefix}For more info check "https://openvpn.net/vpn-server-resources/faq-regarding-openvpn-connect-android/"
        """,
            "ios": f"""{linePrefix}Install the openvpn client from Apple Store ("https://apps.apple.com/us/app/openvpn-connect/id590379981") and then copy and import the current configuration from the device saved location
        """
        }[self.m_configVars["os"]]

    def _DoInstantiate(self):
        return {"linux": self._DoInstantiateLinux,
         "win": self._DoInstantiateInline,
         "macos": self._DoInstantiateInline,
         "android": self._DoInstantiateInline,
         "ios": self._DoInstantiateInline}[self.m_configVars["os"]]()

    def _InstanceStr(self) -> str:
        assert len(self.m_configVars["ports"]) == len(self.m_configVars["protos"])

        def Remotes():
            result = ""
            for idx, port in enumerate(self.m_configVars["ports"]):
                result += "remote " + self.m_configVars["srvHost"] + ' ' + str(port) + " " + \
                          self.m_configVars["protos"][idx] + "\n"
            return result

        def Privileges():
            return """
# Downgrade privileges after initialization (non-Windows only)
user nobody
group nogroup
"""           if self.m_configVars["os"] != "win" else ""


        return f"""#Generated by Liny's OpenVPN client config generator
#Version: {self.m_configVars['verMajor']}.{self.m_configVars['verMinor']}
#Config template: \"{self.Info()['name']}\"
#OS: {self.m_configVars["os"]} 

#Install instructions:
{self.InstallInstructions("#")}

# Specify that we are a client and we'll
# be pulling certain config file directives
# from the server.
client

# Use the same setting as you are using on
# the server.
# On most systems, the VPN will not function
# unless you partially or fully disable
# the firewall for the TUN/TAP interface.
;dev tap
dev tun

# Windows needs the TAP-Win32 adapter name
# from the Network Connections panel
# if you have more than one.  On XP SP2,
# you may need to disable the firewall
# for the TAP adapter.
;dev-node MyTap

# Are we connecting to a TCP or
# UDP server?  Use the same setting as
# on the server.
;proto tcp
;proto udp

# The hostname/IP and port of the server.
# You can have multiple remote entries
# to load balance between the servers.
{Remotes()}

# Choose a random host from the remote
# list for load-balancing.  Otherwise
# try hosts in the order specified.
;remote-random

# Keep trying indefinitely to resolve the
# host name of the OpenVPN server.  Very useful
# on machines which are not permanently connected
# to the internet such as laptops.
resolv-retry infinite

#the time to wait for connecting to a server before
#trying the next one
connect-timeout 15

# Most clients don't need to bind to
# a specific local port number.
nobind
{Privileges()}
# Try to preserve some state across restarts.
persist-key
persist-tun

# If you are connecting through an
# HTTP proxy to reach the actual OpenVPN
# server, put the proxy server/IP and
# port number here.  See the man page
# if your proxy server requires
# authentication.
;http-proxy-retry # retry on connection failures
;http-proxy [proxy server] [proxy port #]

# Wireless networks often produce a lot
# of duplicate packets.  Set this flag
# to silence duplicate packet warnings.
;mute-replay-warnings

# SSL/TLS parms.
# See the server config file for more
# description.  It's best to use
# a separate .crt/.key file pair
# for each client.  A single ca
# file can be used for all clients.

<ca>
{self.m_configVars["caCert"].decode().rstrip()}
</ca>

#inline certificate file
<cert>
{self.m_configVars["cert"].decode().rstrip()}
</cert>

#inline private key file
<key>
{self.m_configVars["key"].decode().rstrip()}
</key>

# Verify server certificate by checking that the
# certicate has the correct key usage set.
# This is an important precaution to protect against
# a potential attack discussed here:
#  http://openvpn.net/howto.html#mitm
#
# To use this feature, you will need to generate
# your server certificates with the keyUsage set to
#   digitalSignature, keyEncipherment
# and the extendedKeyUsage to
#   serverAuth
# EasyRSA can do this for you.
remote-cert-tls server

# If a tls-auth key is used on the server
# then every client must also have the key.
<tls-crypt>
{self.m_configVars["tlsKey"].decode().rstrip()}
</tls-crypt>

# Select a cryptographic cipher.
# If the cipher option is used on the server
# then you must also specify it here.
# Note that v2.4 client/server will automatically
# negotiate AES-256-GCM in TLS mode.
# See also the ncp-cipher option in the manpage
# cipher AES-256-CBC
cipher AES-256-GCM

# Enable compression on the VPN link.
# Don't enable this unless it is also
# enabled in the server config file.
#WARNING: due to security reasons *do not* enable compression
#compress lz4-v2

# Set log file verbosity.
verb 3

# Silence repeating messages
mute 20
# Next two options cause some websites not to load on Android. Enable them with care
#mssfix 0
#tun-mtu 9000
pull

#For security reasons, avoid caching passwords
auth-nocache

{self._ExtraOptions()}
"""

    def _ExtraOptions(self) -> str:
        if self.m_configVars["os"] == "linux":
            return """script-security 2
up "up.sh /var/run/openvpn/linyovpn-down.info"

#the down-root plugin executes the script in the / (root) dir and there is no way of telling the script location but to provide an absolute path
#if the conf files are placed elsewere then "/etc/openvpn" adjust the next line accordingly
#Also, if the "/var/run/openvpn" directory doesn't exists then create it or specify another one
plugin openvpn-plugin-down-root.so /etc/openvpn/down.sh /var/run/openvpn/linyovpn-down.info
"""
        elif self.m_configVars["os"] in ("win", "android", "ios"):
            return """script-security 1

#block any dns requests outside the ones pushed by the openvpn server. Known to work on Windows and Adroid.
block-outside-dns
#flush dns server to ensure using the ones pushed by the openvpn server. Known to work on Windows and Adroid.
register-dns
"""
        elif self.m_configVars["os"] == "macos":
            return """script-security 1
"""
        else:
            return ""

    def _DoInstantiateLinux(self) -> typing.Tuple[typing.IO, str]:
        import os
        import shutil

        moduleDir = os.path.dirname(__file__)
        configtmpDir = os.path.join(self.m_configVars["tmpDir"], "ClientConfig")

        #copy the file to tmp folder
        shutil.copytree(os.path.join(moduleDir, "linux"), configtmpDir)
        with open(os.path.join(configtmpDir, self.Name()), "wb") as f:
            f.write(self._InstanceStr().encode())
        from Utils import CertsUtils
        return CertsUtils.PackConfigTree(configtmpDir), f"{self.BaseName()}-client-conf.tar.xz"

    def _DoInstantiateInline(self) -> typing.Tuple[typing.IO, str]:
        return BytesIO(self._InstanceStr().encode()), self.Name()
